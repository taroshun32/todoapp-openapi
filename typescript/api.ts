// tslint:disable
/**
 * タスク管理アプリAPI
 * タスク管理アプリ用のAPI定義 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ユーザー認証リクエストモデル
 * @export
 * @interface AuthPostParameter
 */
export interface AuthPostParameter {
    /**
     * ユーザ名
     * @type {string}
     * @memberof AuthPostParameter
     */
    userId?: string;
    /**
     * パスワード
     * @type {string}
     * @memberof AuthPostParameter
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * エラーコード
     * @type {number}
     * @memberof ModelError
     */
    code: number;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * バリデーション情報の配列
     * @type {Array<ValidationInfo>}
     * @memberof ModelError
     */
    validationInfo?: Array<ValidationInfo>;
}
/**
 * タスク情報
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * タスクID
     * @type {string}
     * @memberof Task
     */
    id: string;
    /**
     * タスク名
     * @type {string}
     * @memberof Task
     */
    name: string;
    /**
     * 完了したかどうか 
     * @type {boolean}
     * @memberof Task
     */
    isDone: boolean;
    /**
     * 有効期限 ISO 8601形式 
     * @type {string}
     * @memberof Task
     */
    expiresIn: string;
}
/**
 * タスク完了フラグ切り替えリクエストモデル
 * @export
 * @interface TaskDonePutParameter
 */
export interface TaskDonePutParameter {
    /**
     * タスク完了フラグ
     * @type {boolean}
     * @memberof TaskDonePutParameter
     */
    isDone: boolean;
}
/**
 * タスク登録リクエストモデル
 * @export
 * @interface TaskPostAndPutParameter
 */
export interface TaskPostAndPutParameter {
    /**
     * タスク名
     * @type {string}
     * @memberof TaskPostAndPutParameter
     */
    name: string;
    /**
     * 有効期限(yyyyMMdd)
     * @type {string}
     * @memberof TaskPostAndPutParameter
     */
    expiresIn: string;
}
/**
 * タスク情報一覧
 * @export
 * @interface Tasks
 */
export interface Tasks {
    /**
     * 
     * @type {Array<Task>}
     * @memberof Tasks
     */
    value: Array<Task>;
}
/**
 * アクセストークン
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * トークンタイプ
     * @type {string}
     * @memberof Token
     */
    tokenType: string;
    /**
     * アクセストークン
     * @type {string}
     * @memberof Token
     */
    accessToken: string;
    /**
     * リフレッシュトークン
     * @type {string}
     * @memberof Token
     */
    refreshToken: string;
    /**
     * 有効秒数
     * @type {number}
     * @memberof Token
     */
    expiresIn: number;
}
/**
 * トークンリフレッシュリクエストモデル
 * @export
 * @interface TokenRefreshPostParameter
 */
export interface TokenRefreshPostParameter {
    /**
     * リフレッシュトークン
     * @type {string}
     * @memberof TokenRefreshPostParameter
     */
    refreshToken: string;
}
/**
 * 
 * @export
 * @interface ValidationInfo
 */
export interface ValidationInfo {
    /**
     * 対象のフィールド名
     * @type {string}
     * @memberof ValidationInfo
     */
    field: string;
    /**
     * 不正な入力値
     * @type {string}
     * @memberof ValidationInfo
     */
    rejectedValue: string;
    /**
     * バリデーションメッセージ
     * @type {string}
     * @memberof ValidationInfo
     */
    message: string;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * パラメータで送信されたユーザ名/パスワードで認証を行う 
         * @summary ログイン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoginPost: async (xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1LoginPost.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1LoginPost.');
            }
            // verify required parameter 'authPostParameter' is not null or undefined
            if (authPostParameter === null || authPostParameter === undefined) {
                throw new RequiredError('authPostParameter','Required parameter authPostParameter was null or undefined when calling apiV1LoginPost.');
            }
            const localVarPath = `/api/v1/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authPostParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authPostParameter !== undefined ? authPostParameter : {}) : (authPostParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログアウトを行う 
         * @summary ログアウト
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogoutPost: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1LogoutPost.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1LogoutPost.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1LogoutPost.');
            }
            const localVarPath = `/api/v1/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * パラメータで送信されたユーザ名/パスワードで新規登録を行う 
         * @summary 新規登録
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SignupPost: async (xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1SignupPost.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1SignupPost.');
            }
            // verify required parameter 'authPostParameter' is not null or undefined
            if (authPostParameter === null || authPostParameter === undefined) {
                throw new RequiredError('authPostParameter','Required parameter authPostParameter was null or undefined when calling apiV1SignupPost.');
            }
            const localVarPath = `/api/v1/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authPostParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authPostParameter !== undefined ? authPostParameter : {}) : (authPostParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * アクセストークンをリフレッシュする 
         * @summary トークンリフレッシュ
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TokenRefreshPostParameter} tokenRefreshPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TokenRefreshPost: async (xOSTYPE: string, xAPPVERSION: string, tokenRefreshPostParameter: TokenRefreshPostParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TokenRefreshPost.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TokenRefreshPost.');
            }
            // verify required parameter 'tokenRefreshPostParameter' is not null or undefined
            if (tokenRefreshPostParameter === null || tokenRefreshPostParameter === undefined) {
                throw new RequiredError('tokenRefreshPostParameter','Required parameter tokenRefreshPostParameter was null or undefined when calling apiV1TokenRefreshPost.');
            }
            const localVarPath = `/api/v1/token/refresh`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tokenRefreshPostParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tokenRefreshPostParameter !== undefined ? tokenRefreshPostParameter : {}) : (tokenRefreshPostParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * パラメータで送信されたユーザ名/パスワードで認証を行う 
         * @summary ログイン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LoginPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).apiV1LoginPost(xOSTYPE, xAPPVERSION, authPostParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ログアウトを行う 
         * @summary ログアウト
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LogoutPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).apiV1LogoutPost(authorization, xOSTYPE, xAPPVERSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * パラメータで送信されたユーザ名/パスワードで新規登録を行う 
         * @summary 新規登録
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SignupPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).apiV1SignupPost(xOSTYPE, xAPPVERSION, authPostParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * アクセストークンをリフレッシュする 
         * @summary トークンリフレッシュ
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TokenRefreshPostParameter} tokenRefreshPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TokenRefreshPost(xOSTYPE: string, xAPPVERSION: string, tokenRefreshPostParameter: TokenRefreshPostParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await AuthenticationApiAxiosParamCreator(configuration).apiV1TokenRefreshPost(xOSTYPE, xAPPVERSION, tokenRefreshPostParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * パラメータで送信されたユーザ名/パスワードで認証を行う 
         * @summary ログイン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LoginPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any): AxiosPromise<Token> {
            return AuthenticationApiFp(configuration).apiV1LoginPost(xOSTYPE, xAPPVERSION, authPostParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * ログアウトを行う 
         * @summary ログアウト
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LogoutPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any): AxiosPromise<void> {
            return AuthenticationApiFp(configuration).apiV1LogoutPost(authorization, xOSTYPE, xAPPVERSION, options).then((request) => request(axios, basePath));
        },
        /**
         * パラメータで送信されたユーザ名/パスワードで新規登録を行う 
         * @summary 新規登録
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {AuthPostParameter} authPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SignupPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any): AxiosPromise<Token> {
            return AuthenticationApiFp(configuration).apiV1SignupPost(xOSTYPE, xAPPVERSION, authPostParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * アクセストークンをリフレッシュする 
         * @summary トークンリフレッシュ
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TokenRefreshPostParameter} tokenRefreshPostParameter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TokenRefreshPost(xOSTYPE: string, xAPPVERSION: string, tokenRefreshPostParameter: TokenRefreshPostParameter, options?: any): AxiosPromise<Token> {
            return AuthenticationApiFp(configuration).apiV1TokenRefreshPost(xOSTYPE, xAPPVERSION, tokenRefreshPostParameter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * パラメータで送信されたユーザ名/パスワードで認証を行う 
     * @summary ログイン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {AuthPostParameter} authPostParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1LoginPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any) {
        return AuthenticationApiFp(this.configuration).apiV1LoginPost(xOSTYPE, xAPPVERSION, authPostParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ログアウトを行う 
     * @summary ログアウト
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1LogoutPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any) {
        return AuthenticationApiFp(this.configuration).apiV1LogoutPost(authorization, xOSTYPE, xAPPVERSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * パラメータで送信されたユーザ名/パスワードで新規登録を行う 
     * @summary 新規登録
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {AuthPostParameter} authPostParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1SignupPost(xOSTYPE: string, xAPPVERSION: string, authPostParameter: AuthPostParameter, options?: any) {
        return AuthenticationApiFp(this.configuration).apiV1SignupPost(xOSTYPE, xAPPVERSION, authPostParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * アクセストークンをリフレッシュする 
     * @summary トークンリフレッシュ
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {TokenRefreshPostParameter} tokenRefreshPostParameter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiV1TokenRefreshPost(xOSTYPE: string, xAPPVERSION: string, tokenRefreshPostParameter: TokenRefreshPostParameter, options?: any) {
        return AuthenticationApiFp(this.configuration).apiV1TokenRefreshPost(xOSTYPE, xAPPVERSION, tokenRefreshPostParameter, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 登録済みのタスク一覧を取得する 
         * @summary タスク一覧取得
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksGet: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1TasksGet.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TasksGet.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TasksGet.');
            }
            const localVarPath = `/api/v1/tasks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスクを作成する 
         * @summary タスク作成
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksPost: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1TasksPost.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TasksPost.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TasksPost.');
            }
            const localVarPath = `/api/v1/tasks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof taskPostAndPutParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(taskPostAndPutParameter !== undefined ? taskPostAndPutParameter : {}) : (taskPostAndPutParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスクを削除する 
         * @summary タスク削除
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdDelete: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1TasksTaskIdDelete.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TasksTaskIdDelete.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TasksTaskIdDelete.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiV1TasksTaskIdDelete.');
            }
            const localVarPath = `/api/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスクの完了フラグを切り替える 
         * @summary 完了フラグ切り替え
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskDonePutParameter} [taskDonePutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdDonePut: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskDonePutParameter?: TaskDonePutParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1TasksTaskIdDonePut.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TasksTaskIdDonePut.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TasksTaskIdDonePut.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiV1TasksTaskIdDonePut.');
            }
            const localVarPath = `/api/v1/tasks/{taskId}/done`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof taskDonePutParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(taskDonePutParameter !== undefined ? taskDonePutParameter : {}) : (taskDonePutParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タスクを編集する 
         * @summary タスク編集
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdPut: async (authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling apiV1TasksTaskIdPut.');
            }
            // verify required parameter 'xOSTYPE' is not null or undefined
            if (xOSTYPE === null || xOSTYPE === undefined) {
                throw new RequiredError('xOSTYPE','Required parameter xOSTYPE was null or undefined when calling apiV1TasksTaskIdPut.');
            }
            // verify required parameter 'xAPPVERSION' is not null or undefined
            if (xAPPVERSION === null || xAPPVERSION === undefined) {
                throw new RequiredError('xAPPVERSION','Required parameter xAPPVERSION was null or undefined when calling apiV1TasksTaskIdPut.');
            }
            // verify required parameter 'taskId' is not null or undefined
            if (taskId === null || taskId === undefined) {
                throw new RequiredError('taskId','Required parameter taskId was null or undefined when calling apiV1TasksTaskIdPut.');
            }
            const localVarPath = `/api/v1/tasks/{taskId}`
                .replace(`{${"taskId"}}`, encodeURIComponent(String(taskId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (xOSTYPE !== undefined && xOSTYPE !== null) {
                localVarHeaderParameter['X-OS-TYPE'] = String(xOSTYPE);
            }

            if (xAPPVERSION !== undefined && xAPPVERSION !== null) {
                localVarHeaderParameter['X-APP-VERSION'] = String(xAPPVERSION);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof taskPostAndPutParameter !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(taskPostAndPutParameter !== undefined ? taskPostAndPutParameter : {}) : (taskPostAndPutParameter || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 登録済みのタスク一覧を取得する 
         * @summary タスク一覧取得
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TasksGet(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tasks>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).apiV1TasksGet(authorization, xOSTYPE, xAPPVERSION, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * タスクを作成する 
         * @summary タスク作成
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TasksPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).apiV1TasksPost(authorization, xOSTYPE, xAPPVERSION, taskPostAndPutParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * タスクを削除する 
         * @summary タスク削除
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TasksTaskIdDelete(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).apiV1TasksTaskIdDelete(authorization, xOSTYPE, xAPPVERSION, taskId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * タスクの完了フラグを切り替える 
         * @summary 完了フラグ切り替え
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskDonePutParameter} [taskDonePutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TasksTaskIdDonePut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskDonePutParameter?: TaskDonePutParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).apiV1TasksTaskIdDonePut(authorization, xOSTYPE, xAPPVERSION, taskId, taskDonePutParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * タスクを編集する 
         * @summary タスク編集
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1TasksTaskIdPut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await TaskApiAxiosParamCreator(configuration).apiV1TasksTaskIdPut(authorization, xOSTYPE, xAPPVERSION, taskId, taskPostAndPutParameter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 登録済みのタスク一覧を取得する 
         * @summary タスク一覧取得
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksGet(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any): AxiosPromise<Tasks> {
            return TaskApiFp(configuration).apiV1TasksGet(authorization, xOSTYPE, xAPPVERSION, options).then((request) => request(axios, basePath));
        },
        /**
         * タスクを作成する 
         * @summary タスク作成
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any): AxiosPromise<Task> {
            return TaskApiFp(configuration).apiV1TasksPost(authorization, xOSTYPE, xAPPVERSION, taskPostAndPutParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * タスクを削除する 
         * @summary タスク削除
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdDelete(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, options?: any): AxiosPromise<void> {
            return TaskApiFp(configuration).apiV1TasksTaskIdDelete(authorization, xOSTYPE, xAPPVERSION, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * タスクの完了フラグを切り替える 
         * @summary 完了フラグ切り替え
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskDonePutParameter} [taskDonePutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdDonePut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskDonePutParameter?: TaskDonePutParameter, options?: any): AxiosPromise<void> {
            return TaskApiFp(configuration).apiV1TasksTaskIdDonePut(authorization, xOSTYPE, xAPPVERSION, taskId, taskDonePutParameter, options).then((request) => request(axios, basePath));
        },
        /**
         * タスクを編集する 
         * @summary タスク編集
         * @param {string} authorization アクセストークン
         * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
         * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
         * @param {string} taskId タスクID
         * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TasksTaskIdPut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any): AxiosPromise<Task> {
            return TaskApiFp(configuration).apiV1TasksTaskIdPut(authorization, xOSTYPE, xAPPVERSION, taskId, taskPostAndPutParameter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 登録済みのタスク一覧を取得する 
     * @summary タスク一覧取得
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiV1TasksGet(authorization: string, xOSTYPE: string, xAPPVERSION: string, options?: any) {
        return TaskApiFp(this.configuration).apiV1TasksGet(authorization, xOSTYPE, xAPPVERSION, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスクを作成する 
     * @summary タスク作成
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiV1TasksPost(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any) {
        return TaskApiFp(this.configuration).apiV1TasksPost(authorization, xOSTYPE, xAPPVERSION, taskPostAndPutParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスクを削除する 
     * @summary タスク削除
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {string} taskId タスクID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiV1TasksTaskIdDelete(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, options?: any) {
        return TaskApiFp(this.configuration).apiV1TasksTaskIdDelete(authorization, xOSTYPE, xAPPVERSION, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスクの完了フラグを切り替える 
     * @summary 完了フラグ切り替え
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {string} taskId タスクID
     * @param {TaskDonePutParameter} [taskDonePutParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiV1TasksTaskIdDonePut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskDonePutParameter?: TaskDonePutParameter, options?: any) {
        return TaskApiFp(this.configuration).apiV1TasksTaskIdDonePut(authorization, xOSTYPE, xAPPVERSION, taskId, taskDonePutParameter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タスクを編集する 
     * @summary タスク編集
     * @param {string} authorization アクセストークン
     * @param {string} xOSTYPE 端末種別(IOS / ANDROID)とOSバージョン   * 形式： 端末種別＋半角スペース＋OSバージョン   * 例： IOS 11.4.1 
     * @param {string} xAPPVERSION アプリバージョン   * 例： 1.6.0 
     * @param {string} taskId タスクID
     * @param {TaskPostAndPutParameter} [taskPostAndPutParameter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiV1TasksTaskIdPut(authorization: string, xOSTYPE: string, xAPPVERSION: string, taskId: string, taskPostAndPutParameter?: TaskPostAndPutParameter, options?: any) {
        return TaskApiFp(this.configuration).apiV1TasksTaskIdPut(authorization, xOSTYPE, xAPPVERSION, taskId, taskPostAndPutParameter, options).then((request) => request(this.axios, this.basePath));
    }

}


